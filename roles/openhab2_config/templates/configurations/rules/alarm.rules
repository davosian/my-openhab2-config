import org.joda.time.DateTime

var Timer timerRouterLAN = null

rule "Set alarm climate items"
	when Item alarm_climate received update
then
	logInfo("org.openhab.rules","Alarm climate has changed to: " + alarm_climate.state.toString())
	if (alarm_climate != null) {
		
		logInfo("org.openhab.rules.alarm", "Test parse: {}", transform("JSONPATH", "$.[?(@.location=='GANG')].temperature", alarm_climate.state.toString).split('&').get(0).replace(',','.'))
		
		var String temp_string = ''
		var String[] temperature
		temp_string = transform("JSONPATH", "$.[?(@.location=='GANG')][0].temperature", alarm_climate.state.toString())
		temperature = temp_string.split('&')
		postUpdate(alarm_temperature_hall_gf, temperature.get(0).replace(',', '.'))
	
		temp_string = transform("JSONPATH", "$.[?(@.location=='GANG NEDE')][0].temperature", alarm_climate.state.toString())
		temperature = temp_string.split('&')
		postUpdate(alarm_temperature_hall_basement, temperature.get(0).replace(',', '.'))
	
		temp_string = transform("JSONPATH", "$.[?(@.location=='Gang oppe')][0].temperature", alarm_climate.state.toString())
		temperature = temp_string.split('&')
		postUpdate(alarm_temperature_hall_1st, temperature.get(0).replace(',', '.'))
	
		temp_string = transform("JSONPATH", "$.[?(@.location=='vaskerom')][0].temperature", alarm_climate.state.toString())
		temperature = temp_string.split('&')
		postUpdate(alarm_temperature_laundry, temperature.get(0).replace(',', '.'))
	
		temp_string = transform("JSONPATH", "$.[?(@.location=='GANG')][0].humidity", alarm_climate.state.toString())
		var String[] humidity = temp_string.split('%')
		postUpdate(alarm_humidity_hall_gf, humidity.get(0).replace(',', '.'))
	
		temp_string = transform("JSONPATH", "$.[?(@.location=='GANG NEDE')][0].humidity", alarm_climate.state.toString())
		humidity = temp_string.split('%')
		postUpdate(alarm_humidity_hall_basement, humidity.get(0).replace(',', '.'))
	
		temp_string = transform("JSONPATH", "$.[?(@.location=='Gang oppe')][0].humidity", alarm_climate.state.toString())
		humidity = temp_string.split('%')
		postUpdate(alarm_humidity_hall_1st, humidity.get(0).replace(',', '.'))
	
		temp_string = transform("JSONPATH", "$.[?(@.location=='vaskerom')][0].humidity", alarm_climate.state.toString())
		humidity = temp_string.split('%')
		postUpdate(alarm_humidity_laundry, humidity.get(0).replace(',', '.'))
		
		temp_string = transform("JSONPATH", "$.[?(@.location=='KJÃ˜KKEN')][0].temperature", alarm_climate.state.toString())
		temperature = temp_string.split('&')
		postUpdate(alarm_temperature_kitchen, temperature.get(0).replace(',', '.'))
	
	}
end

rule "Arming, disarming alarm"
when 	Item alarm_alarm changed or
		Item alarm_alarm received command
then
	logInfo("org.openhab.rules.alarm", "Alarm state changed to: " + alarm_alarm.state.toString() + " - current state from binding: " + alarm_current_status.state.toString())
	if (alarm_alarm.state == null && alarm_current_status.state != null) {
		postUpdate(alarm_alarm, alarm_current_status.state)
		logInfo("org.openhab.rules.alarm", "Alarm status is null, so trying to update it to: " + alarm_current_status.state)
	} else {
		logInfo("org.openhab.rules.alarm", "Alarm state changed to: " + alarm_alarm.state.toString())
		if (alarm_alarm.state == "unarmed" || alarm_alarm.state == "armedhome") // HOME 
		{
			var DateTime eveningTime = now.withTime(21, 0, 0, 0)
			var DateTime nightTime = now.withTime(2,0,0,0)
			var DateTime dayTime = now.withTime(5,0,0,0)
			
			if(nightTime.afterNow && dayTime.beforeNow) {
				sendCommand(mode, 0) // HOME
			} else if (nightTime.beforeNow && dayTime.afterNow) {
				sendCommand(mode, 1) // NIGHT
			} else if (nightTime.afterNow || eveningTime.beforeNow) {
				sendCommand(mode, 3) // EVENING 
			} else {
				sendCommand(mode, 0) // HOME
			}
		} else if (alarm_alarm.state == "armedaway" || alarm_alarm.state == "armed") // AWAY
			sendCommand(mode, 2) 
		else
			pushover("Ukjent alarmstatus: " + alarm_alarm.state.toString)
	}
end

// Creates an item that stores the last update time of this item
rule "Records last temperature update time"
when
  Item alarm_temperature_hall_1st received update
then
  postUpdate(alarm_temperature_hall_1st_LastUpdate, new DateTimeType())
end

rule "Leaving home, we think"
when
	Item home_away_lan changed from ON to OFF
then
	logInfo("org.openhab.rules","Arduino disconnected, started timer.")
	if( timerRouterLAN == null ) {
		timerRouterLAN = createTimer(now.plusSeconds(10)) [|
			logInfo("org.openhab.rules", "Timer has timed out. Checking status from Alarm")
            var String json = executeCommandLine("node@@{{openhab_configuration_dir}}/scripts/alarm.js", 5000)
			var String alarmstate =  transform("JSONPATH", "$.status", json)
			logInfo("org.openhab.rules", "JSON is [" + json + "] , and alarm state is then [" +  alarmstate + "]")
			
			if (alarmstate == null) {
				logInfo("org.openhab.rules.alarm", "Could not get alarm state, trying again in 30 seconds...")
				timerRouterLAN.reschedule(now.plusSeconds(30))
			} else {
				sendCommand(alarm_alarm, alarmstate)
				if(timerRouterLAN!=null) {
					if(timerRouterLAN.running) {
						timerRouterLAN.cancel()
					}
					timerRouterLAN= null
				}
			
			}
		]
	} else {
		timerRouterLAN.reschedule(now.plusSeconds(30))
	}
end

rule "Alarm is being disarmed"
	when
		Item home_away_lan changed from OFF to ON
	then
		if(timerRouterLAN != null) {
			timerRouterLAN.cancel()
			timerRouterLAN = null
		}
		logInfo("org.openhab.rules", "Arduino is online. Checking status from Alarm")
        var String json = executeCommandLine("node@@{{openhab_configuration_dir}}/scripts/alarm.js", 5000)
		var String alarmstate =  transform("JSONPATH", "$.status", json)
		logInfo("org.openhab.rules", "JSON is [" + json + "] , and alarm state is then [" +  alarmstate + "]")
			
		if (alarmstate != null) {
			sendCommand(alarm_alarm, alarmstate)
		}
end