import org.joda.time.DateTime

var Timer checkAlarmTimer = null

rule "Set alarm climate items"
	when 
		Time cron "0 0 0/2 1/1 * ? *"
		or 
		Item alarm_climate received update
then
		var String json = executeCommandLine("node@@{{openhab_configuration_dir}}/scripts/alarm-climate.js", 5000)
        if (json != null) {
        		try {
        			var String climate = json.replace('&#176;', '')
	
					// TEMPERATURE
	                var String temp_string = ''
	                temp_string = transform("JSONPATH", "$.[?(@.location=='GANG')].temperature", climate).replace('[\"', '').replace('\"]','').replace(',','.')
	                postUpdate(alarm_temperature_hall_gf, temp_string)
	
	                temp_string = transform("JSONPATH", "$.[?(@.location=='GANG NEDE')].temperature", climate).replace('[\"', '').replace('\"]','').replace(',','.')
	                postUpdate(alarm_temperature_hall_basement, temp_string)
	
	                temp_string = transform("JSONPATH", "$.[?(@.location=='Gang oppe')].temperature", climate).replace('[\"', '').replace('\"]','').replace(',','.')
	                postUpdate(alarm_temperature_hall_1st, temp_string)
	
	                temp_string = transform("JSONPATH", "$.[?(@.location=='vaskerom')].temperature", climate).replace('[\"', '').replace('\"]','').replace(',','.')
	                postUpdate(alarm_temperature_laundry, temp_string)
	
					temp_string = transform("JSONPATH", "$.[?(@.location=='KJÃ˜KKEN')].temperature", climate).replace('[\"', '').replace('\"]','').replace(',','.')
                	postUpdate(alarm_temperature_kitchen, temp_string)
	
	                // HUMIDITY
	                temp_string = transform("JSONPATH", "$.[?(@.location=='GANG')].humidity", climate).replace('[\"', '').replace('\"]','').replace(',','.')
	                var String[] humidity = temp_string.split('%')
	                postUpdate(alarm_humidity_hall_gf, humidity.get(0).replace(',', '.'))
	
	                temp_string = transform("JSONPATH", "$.[?(@.location=='GANG NEDE')].humidity", climate).replace('[\"', '').replace('\"]','').replace(',','.')
	                humidity = temp_string.split('%')
	                postUpdate(alarm_humidity_hall_basement, humidity.get(0).replace(',', '.'))
	
	                temp_string = transform("JSONPATH", "$.[?(@.location=='Gang oppe')].humidity", climate).replace('[\"', '').replace('\"]','').replace(',','.')
	                humidity = temp_string.split('%')
	                postUpdate(alarm_humidity_hall_1st, humidity.get(0).replace(',', '.'))

	                temp_string = transform("JSONPATH", "$.[?(@.location=='vaskerom')].humidity", climate).replace('[\"', '').replace('\"]','').replace(',','.')
	                humidity = temp_string.split('%')
	                postUpdate(alarm_humidity_laundry, humidity.get(0).replace(',', '.'))
	                logDebug("org.openhab.rules.alarm", "Has updated climate-data from json")
                } catch (Exception e) {
                	logError("org.openhab.rules.alarm", "Something went wrong when trying to parse json {}, exception is: {}", json, e)
                }
        } else {
                logInfo("org.openhab.rules.alarm", "Tried to fetch climate-data, but only got null..")
        }
end

rule "Check alarm state" 
when
	Item alarm_check received update
then
	if (checkAlarmTimer == null) {
		checkAlarmTimer = createTimer(now.plusSeconds(5)) [|
			logInfo("org.openhab.rules", "Timer has timed out. Checking status from Alarm")
            var String json = executeCommandLine("node@@{{openhab_configuration_dir}}/scripts/alarm.js", 5000)
			var String alarmstate =  transform("JSONPATH", "$.status", json)
			logInfo("org.openhab.rules", "JSON is [" + json + "] , and alarm state is then [" +  alarmstate + "]")
			
			if (alarmstate == null) {
				logInfo("org.openhab.rules.alarm", "Could not get alarm state, trying again in 30 seconds...")
				checkAlarmTimer.reschedule(now.plusSeconds(30))
			} else {
				sendCommand(alarm_alarm, alarmstate)
				if(checkAlarmTimer!=null) {
					if(checkAlarmTimer.running) {
						checkAlarmTimer.cancel()
					}
					checkAlarmTimer = null
				}
			}
		]	
	}
end

rule "Arming, disarming alarm"
when 	Item alarm_alarm changed or
		Item alarm_alarm received command
then
	logInfo("org.openhab.rules.alarm", "Alarm state changed to: " + alarm_alarm.state.toString())
	if (alarm_alarm.state == null) {
		logInfo("org.openhab.rules.alarm", "Alarm state is null, trying to fetch state again...")
		postUpdate(alarm_check, ""+ now)
	} else {
		logInfo("org.openhab.rules.alarm", "Alarm state changed to: " + alarm_alarm.state.toString())
		if (alarm_alarm.state == "unarmed" || alarm_alarm.state == "armedhome") // HOME 
		{
			var DateTime eveningTime = now.withTime(21, 0, 0, 0)
			var DateTime nightTime = now.withTime(1,0,0,0)
			var DateTime dayTime = now.withTime(5,0,0,0)
			
			if(nightTime.afterNow && dayTime.beforeNow) {
				sendCommand(mode, 0) // HOME
			} else if (nightTime.beforeNow && dayTime.afterNow) {
				sendCommand(mode, 1) // NIGHT
			} else if (nightTime.afterNow || eveningTime.beforeNow) {
				if (mode.state != 1)
					sendCommand(mode, 3) // EVENING 
			} else {
				sendCommand(mode, 0) // HOME
			}
		} else if (alarm_alarm.state == "armedaway" || alarm_alarm.state == "armed") // AWAY
			sendCommand(mode, 2) 
		else
			sendNotification("{{stein_email}}","Ukjent alarmstatus: " + alarm_alarm.state.toString)
	}
end

// Creates an item that stores the last update time of this item
rule "Records last temperature update time"
when
  Item alarm_temperature_hall_1st received update
then
  postUpdate(alarm_temperature_hall_1st_LastUpdate, new DateTimeType())
end

rule "Leaving home, we think"
when
	Item home_away_lan changed
then
	logInfo("org.openhab.rules","Arduino state changed to: " + home_away_lan.state + ", checking alarm")
	postUpdate(alarm_check, "" + now)
end


rule "Lock or unlock the door"
	when
		Item alarm_door_lock received command
	then
	var String cmd = "vsure {{alarm_login}} {{alarm_password}} set lock {{alarm_key}} '{{alarm_lock_id}}'"
	switch (receivedCommand) {
		case ON: {
			// Lock door
			executeCommandLine(cmd + " lock", 5000)
		}
		case OFF: {
			// Unlock door
			executeCommandLine(cmd + " unlock", 5000)
		}
	}	
end

rule "Check the status off the door lock"
	when
		Item alarm_door_lock_check received update or
		Item alarm_door_lock_check received command
	then
	var result = executeCommandLine("vsure {{alarm_login}} {{alarm_password}} overview doorLockStatusList", 5000)
	logDebug("org.openhab.alarm", "Door lock state: " + result)
end
